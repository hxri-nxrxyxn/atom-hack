#include <Wire.h>
#include <TinyGPS++.h>
#include <HardwareSerial.h>

// MPU-6050 I2C address
const int MPU_addr = 0x68;  
int16_t AcX, AcY, AcZ, GyX, GyY, GyZ;
boolean fall = false;
boolean fallSent = false;

// Gyroscope threshold for fall detection
const int GYRO_THRESHOLD = 15000;

// Create a TinyGPS++ object
TinyGPSPlus gps;

// Define the serial interface for GPS
HardwareSerial gpsSerial(1);

void setup() {
  Serial.begin(115200);
  Serial.println();

  // Initialize MPU-6050
  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0);     // Wake up the MPU-6050
  Wire.endTransmission(true);

  // Initialize GPS module
  gpsSerial.begin(9600, SERIAL_8N1, 16, 17); // RX=16, TX=17
  Serial.println("GPS module ready...");
}

void loop() {
  // Process MPU-6050 readings
  mpu_read();

  // Check acceleration for fall detection
  float amplitude = sqrt(pow((AcX - 2050) / 16384.0, 2) + pow((AcY - 77) / 16384.0, 2) + pow((AcZ - 1947) / 16384.0, 2)) * 10;
  
  if (amplitude <= 6 && !fall) {
    fall = true;
    fallSent = false; // Reset the fallSent flag
    Serial.println("FALL DETECTED (Acceleration)");
    printGPSLocation(); // Print GPS location when a fall is detected
  }

  // Reset fall flag if acceleration and gyroscope readings normalize
  if (amplitude > 5 && abs(GyX) < GYRO_THRESHOLD && abs(GyY) < GYRO_THRESHOLD && abs(GyZ) < GYRO_THRESHOLD) {
    fall = false;
  }

  // Process GPS data
  while (gpsSerial.available() > 0) {
    char c = gpsSerial.read();
    gps.encode(c);

    // Print GPS location periodically if available
    if (gps.location.isUpdated()) {
      Serial.print("Latitude: ");
      Serial.println(gps.location.lat(), 6);
      Serial.print("Longitude: ");
      Serial.println(gps.location.lng(), 6);
      Serial.print("Altitude: ");
      Serial.println(gps.altitude.meters());
    }
  }

  delay(200); // Adjust delay for processing
}

void mpu_read() {
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);  // Starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr, 14, true);  // Request a total of 14 registers
  AcX = Wire.read() << 8 | Wire.read();  // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)
  AcY = Wire.read() << 8 | Wire.read();  // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
  AcZ = Wire.read() << 8 | Wire.read();  // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
  GyX = Wire.read() << 8 | Wire.read();  // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  GyY = Wire.read() << 8 | Wire.read();  // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
  GyZ = Wire.read() << 8 | Wire.read();  // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)
}

void printGPSLocation() {
  if (gps.location.isValid()) {
    Serial.print("Fall detected at GPS location: ");
    Serial.print("Latitude: ");
    Serial.print(gps.location.lat(), 6);
    Serial.print(", Longitude: ");
    Serial.println(gps.location.lng(), 6);
  } else {
    Serial.println("GPS location not available");
  }
}
