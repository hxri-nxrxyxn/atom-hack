#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>

#define TFT_CS 5
#define TFT_RST 4
#define TFT_DC 2
#define IR_SENSOR_PIN 13  // Define the IR sensor pin
const char* ssid = "ATOM";
const char* password = "12345atom";

// Create AsyncWebServer object on port 80
AsyncWebServer server(5555);
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

// Menu options
const char *menuOptions[] = { "Bathroom", "Food", "Bystander", "Panic" };
const int menuSize = sizeof(menuOptions) / sizeof(menuOptions[0]);
int currentOption = 0;
int tapCount = 0;
bool inMenu = false;  // Start with bitmap display
unsigned long lastTapTime = 0;
const unsigned long tapTimeout = 500;  // 500 ms for tap detection

// Bitmap placeholders (example sizes provided)
// static const unsigned char PROGMEM image_download_bits[] = { /* Bitmap data */ };
static const unsigned char PROGMEM image_download_bits[] = { 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x10, 0x00, 0x01, 0x10, 0xdb, 0x6d, 0x70, 0xdb, 0x6d, 0x80, 0xdb, 0x6d, 0x80, 0xdb, 0x6d, 0x80, 0xdb, 0x6d, 0x80, 0xdb, 0x6d, 0x80, 0xdb, 0x6d, 0x70, 0xdb, 0x6d, 0x10, 0xdb, 0x6d, 0x10, 0x00, 0x01, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
static const unsigned char PROGMEM image_download_1_bits[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x40, 0x01, 0x00, 0x48, 0x09, 0x00, 0x90, 0x84, 0x80, 0xa5, 0xd2, 0x80, 0xa9, 0x4a, 0x80, 0xa5, 0xd2, 0x80, 0x90, 0x84, 0x80, 0x48, 0x09, 0x00, 0x40, 0x01, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
static const unsigned char PROGMEM image_download_2_bits[] = { 0x03, 0xc0, 0x12, 0x48, 0x2c, 0x34, 0x40, 0x02, 0x23, 0xc4, 0x24, 0x24, 0xc8, 0x13, 0x88, 0x11, 0x88, 0x11, 0xc8, 0x13, 0x24, 0x24, 0x23, 0xc4, 0x40, 0x02, 0x2c, 0x34, 0x12, 0x48, 0x03, 0xc0 };
static const unsigned char PROGMEM image_download_3_bits[] = { 0x03, 0x80, 0x04, 0x40, 0x09, 0x20, 0x12, 0x90, 0x12, 0x90, 0x11, 0x10, 0x08, 0x20, 0x04, 0x40, 0x04, 0x40, 0x1a, 0xb0, 0x21, 0x08, 0x21, 0x08, 0x40, 0x04, 0x40, 0x04, 0x9c, 0x72, 0xe3, 0x8e };
static const unsigned char PROGMEM image_download_4_bits[] = { 0x07, 0xc0, 0x1e, 0x70, 0x27, 0xf8, 0x61, 0xe4, 0x43, 0xe4, 0x87, 0xca, 0x9f, 0xf6, 0xdf, 0x82, 0xdf, 0x82, 0xe3, 0xc2, 0x61, 0xf4, 0x70, 0xf4, 0x31, 0xf8, 0x1b, 0xf0, 0x07, 0xc0, 0x00, 0x00 };
static const unsigned char PROGMEM image_download_5_bits[] = { 0x00, 0x00, 0x09, 0x20, 0x7f, 0xfc, 0xc9, 0x26, 0x80, 0x02, 0x8c, 0x22, 0x92, 0x62, 0x92, 0xa2, 0x82, 0x22, 0x84, 0x22, 0x88, 0x22, 0x90, 0x22, 0x9e, 0xf2, 0xc0, 0x06, 0x7f, 0xfc, 0x00, 0x00 };
static const unsigned char PROGMEM image_download_6_bits[] = { 0x7f, 0xff, 0xc0, 0x80, 0x00, 0x20, 0x88, 0x02, 0x20, 0x92, 0x49, 0x20, 0x94, 0xe5, 0x20, 0x94, 0xe5, 0x20, 0x92, 0x49, 0x20, 0x88, 0x42, 0x20, 0x80, 0x40, 0x20, 0x80, 0x00, 0x20, 0x7f, 0xff, 0xc0 };
static const unsigned char PROGMEM image_download_7_bits[] = { 0x07, 0xc0, 0x18, 0x30, 0x27, 0xc8, 0x44, 0x24, 0x42, 0x14, 0xb1, 0x0a, 0xa8, 0x8a, 0xa4, 0x4a, 0xa2, 0x2a, 0xa1, 0x1a, 0x50, 0x84, 0x48, 0x44, 0x27, 0xc8, 0x18, 0x30, 0x07, 0xc0, 0x00, 0x00 };
static const unsigned char PROGMEM image_download_8_bits[] = { 0xe3, 0x22, 0xee, 0x94, 0xa2, 0x89, 0xe4, 0xaa, 0xce, 0x84, 0xaa, 0x8a, 0x83, 0x14, 0xe9 };
static const unsigned char PROGMEM image_download_9_bits[] = { 0xf8, 0x70, 0x20 };
static const unsigned char PROGMEM image_download_10_bits[] = { 0x70, 0x50, 0x50, 0x50, 0x70, 0x20, 0x00, 0x70 };
static const unsigned char PROGMEM image_download_11_bits[] = { 0x02, 0x80, 0x05, 0x00, 0x0a, 0x00, 0x17, 0x80, 0x21, 0x00, 0x42, 0x00, 0xf4, 0x00, 0x28, 0x00, 0x50, 0x00, 0xa0, 0x00 };
static const unsigned char PROGMEM image_download_12_bits[] = { 0x03, 0xf0, 0x00, 0x0f, 0xfc, 0x00, 0x1f, 0xfe, 0x00, 0x3f, 0xff, 0x00, 0x7f, 0xff, 0x80, 0x7f, 0xff, 0x80, 0xff, 0xff, 0xc0, 0xf3, 0xf3, 0xc0, 0xe1, 0xe1, 0xc0, 0xe1, 0xe1, 0xc0, 0xf3, 0xf3, 0xc0, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0x80, 0x7d, 0xef, 0x80, 0x3e, 0x1f, 0x00, 0x1f, 0xfe, 0x00, 0x0f, 0xfc, 0x00, 0x03, 0xf0, 0x00 };
static const unsigned char PROGMEM image_download_13_bits[] = { 0x00, 0x20, 0x00, 0x02, 0x02, 0x00, 0x00, 0x70, 0x00, 0x01, 0x8c, 0x00, 0x09, 0x04, 0x80, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x07, 0x82, 0x00, 0x08, 0x44, 0x80, 0x10, 0x2c, 0x00, 0x30, 0x30, 0x00, 0x60, 0x1e, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x7f, 0xfe, 0x00 };
static const unsigned char PROGMEM image_download_14_bits[] = { 0xc3, 0x61, 0x80, 0x00, 0xe7, 0x61, 0x80, 0x00, 0xff, 0x61, 0x80, 0x00, 0xff, 0x61, 0xbf, 0x80, 0xdb, 0x7f, 0xbf, 0x80, 0xdb, 0x7f, 0x83, 0x00, 0xdb, 0x61, 0x86, 0x00, 0xc3, 0x61, 0x8c, 0x00, 0xc3, 0x61, 0x98, 0x00, 0xc3, 0x61, 0xbf, 0x80, 0xc3, 0x61, 0xbf, 0x80 };
static const unsigned char PROGMEM image_download_15_bits[] = { 0x7f, 0xfe, 0x80, 0x01, 0x80, 0x11, 0x80, 0x19, 0xbf, 0xfd, 0x80, 0x19, 0x80, 0x11, 0x80, 0x01, 0x7f, 0xfe };
// Add other bitmap data here...

void displayBitmaps() {
  tft.fillScreen(ST7735_BLACK);  // Clear screen

  // Display the bitmaps (adjust positions and sizes as needed)
  tft.drawBitmap(69, 0, image_download_bits, 24, 16, 0x540);
  tft.drawBitmap(100, -1, image_download_1_bits, 17, 16, 0xA800);
  // Add more drawBitmap calls for additional images...
  tft.drawBitmap(69, 0, image_download_bits, 24, 16, 0x540);
  tft.drawBitmap(100, -1, image_download_1_bits, 17, 16, 0xA800);
  tft.drawBitmap(69, 119, image_download_2_bits, 16, 16, 0xAD55);
  tft.drawBitmap(42, 119, image_download_3_bits, 15, 16, 0xAAA0);

  // Display static text
  tft.setTextColor(0xFC43);
  tft.setTextWrap(false);
  tft.setCursor(35, 53);
  tft.setTextSize(3);
  tft.print("ATOM");
  tft.drawBitmap(14, 119, image_download_5_bits, 15, 16, 0x52BF);

  tft.drawBitmap(2, 146, image_download_6_bits, 19, 11, 0xA800);

  tft.drawBitmap(96, 120, image_download_7_bits, 15, 16, 0xA800);

  tft.drawBitmap(100, 147, image_download_8_bits, 24, 5, 0xFFFF);

  tft.drawBitmap(87, 66, image_download_10_bits, 5, 8, 0xA800);

  // tft.setTextColor(0xA815);
  // tft.setCursor(7, 84);
  // tft.print("Have great day..");
  tft.drawBitmap(88, 144, image_download_11_bits, 9, 10, 0x540);

  tft.drawBitmap(4, -1, image_download_13_bits, 17, 16, 0xFFEA);

  tft.drawBitmap(30, 2, image_download_14_bits, 25, 11, 0x555);

  tft.drawBitmap(54, 98, image_download_15_bits, 16, 9, 0x57EA);
}

void displayMenu(int selectedOption) {
  tft.fillScreen(ST7735_BLACK);  // Clear screen

  // Draw menu title with icon
  tft.setTextColor(ST7735_RED, ST7735_BLACK);
  tft.setCursor(10, 5);
  tft.setTextSize(2);      // Larger font size for heading
  tft.print("\x1F Menu");  // Adding a small icon (ASCII character example)

  // Draw underline for the menu title
  tft.drawLine(10, 25, 120, 25, ST7735_RED);

  for (int i = 0; i < menuSize; i++) {
    if (i == selectedOption) {
      tft.setTextColor(ST7735_GREEN, ST7735_BLACK);  // Highlight selected option
    } else {
      tft.setTextColor(ST7735_WHITE, ST7735_BLACK);  // Normal text color
    }
    tft.setCursor(10, 30 + i * 30);  // Set position for each menu item
    tft.setTextSize(2);              // Larger font for menu items
    tft.print(menuOptions[i]);
  }
}

void setup() {
  pinMode(IR_SENSOR_PIN, INPUT_PULLUP);  // Set IR sensor pin as input with pull-up
  tft.initR(INITR_BLACKTAB);             // Initialize TFT
  tft.fillScreen(ST7735_BLACK);          // Clear screen
  displayBitmaps();                      // Display the initial bitmaps

    // Initialize Access Point
  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.begin(115200);
  Serial.print("AP IP address: ");
  Serial.println(IP);

  // Define server route
  server.on("/send-data", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(200, "text/plain", "Hai Midhun");
  });

  // Start server
  server.begin();
}

void loop() {
  int sensorState = digitalRead(IR_SENSOR_PIN);

  if (!inMenu && sensorState == LOW) {  // Switch to menu on IR sensor activation
    inMenu = true;
    delay(500);  // Debounce delay
    displayMenu(currentOption);
  } else if (inMenu && sensorState == LOW) {  // Handle menu interactions
    unsigned long currentTime = millis();

    if (currentTime - lastTapTime > tapTimeout) {
      tapCount++;
      lastTapTime = currentTime;

      if (tapCount == 1) {  // Single tap moves the menu down
        currentOption = (currentOption + 1) % menuSize;
        displayMenu(currentOption);
      } else if (tapCount == 2) {      // Double tap selects the current option
        tft.fillScreen(ST7735_BLACK);  // Clear screen
        tft.setTextColor(ST7735_WHITE, ST7735_BLACK);
        tft.setCursor(10, 40);
        tft.setTextSize(2);
        tft.print("Selected:");
        tft.setCursor(10, 70);
        tft.print(menuOptions[currentOption]);
        delay(2000);  // Hold selected option for 2 seconds
        inMenu = false;
        displayBitmaps();          // Return to bitmap display
      } else if (tapCount == 3) {  // Triple tap resets the menu
        inMenu = false;
        tapCount = 0;
        displayBitmaps();
      }
    }
  } else {
    if (millis() - lastTapTime > tapTimeout) {
      tapCount = 0;  // Reset tap count after timeout
    }
  }
}

void displayWheelchairControls() {
  tft.fillScreen(ST7735_BLACK); // Clear screen

  // Display navigation arrows
  tft.setTextColor(ST7735_WHITE, ST7735_BLACK);
  tft.setTextSize(1); // Adjusted font size for better fit
  tft.setCursor(35, 10);
  tft.print("Wheelchair Nav");

  // Up arrow
  tft.fillTriangle(64, 40, 54, 60, 74, 60, ST7735_WHITE);
  
  // Down arrow
  tft.fillTriangle(64, 100, 54, 80, 74, 80, ST7735_WHITE);

  // Left arrow
  tft.fillTriangle(44, 70, 64, 60, 64, 80, ST7735_WHITE);

  // Right arrow
  tft.fillTriangle(84, 70, 64, 60, 64, 80, ST7735_WHITE);
}
